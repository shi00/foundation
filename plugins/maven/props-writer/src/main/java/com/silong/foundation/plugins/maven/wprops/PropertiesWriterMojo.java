/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.silong.foundation.plugins.maven.wprops;

import lombok.Getter;
import lombok.Setter;
import lombok.SneakyThrows;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * 定制Properties文件
 *
 * @author louis sin
 * @version 1.0.0
 * @since 2022-04-28 22:47
 */
@Mojo(
    name = "write-properties-file",
    defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
    threadSafe = true)
public class PropertiesWriterMojo extends AbstractMojo {

  /** Output directory (defaults to ${project.build.outputDirectory}) */
  @Parameter(
      property = "outputDirectory",
      defaultValue = "${project.build.outputDirectory}",
      required = true)
  @Getter
  @Setter
  private File outputDirectory;

  /** Filename where the properties are saved */
  @Parameter(property = "fileName", required = true)
  @Getter
  @Setter
  private String fileName;

  /** Properties to save */
  @Parameter(property = "properties", required = true)
  @Getter
  @Setter
  private Properties properties;

  /** Comment for properties file */
  @Parameter(property = "comment", defaultValue = "Generated by write-property-file Maven plugin")
  @Getter
  @Setter
  private String comment;

  /** Create intermediate directories if necessary (defaults to true) */
  @Parameter(property = "createDirectory", defaultValue = "true")
  @Getter
  @Setter
  private boolean createDirectory;

  @SneakyThrows
  public void execute() {
    Log log = getLog();

    // 文件输出目录不存在，则创建
    if (!outputDirectory.exists()) {
      if (outputDirectory.mkdirs()) {
        log.info(
            String.format(
                "Directory %s was successfully created.", outputDirectory.getCanonicalPath()));
      } else {
        throw new MojoFailureException(
            "Failed to create directory " + outputDirectory.getCanonicalPath());
      }
    }

    File outputFile = outputDirectory.toPath().resolve(fileName).toFile();
    log.info("Saving properties to file " + outputFile.getCanonicalPath());
    try (FileOutputStream out = new FileOutputStream(outputFile)) {
      properties.store(out, comment);
    } catch (IOException e) {
      throw new MojoFailureException(
          "Failed to save properties to " + outputFile.getCanonicalPath(), e);
    }
  }
}

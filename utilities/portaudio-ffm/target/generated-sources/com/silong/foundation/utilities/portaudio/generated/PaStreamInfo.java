// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaStreamInfo {
 *     int structVersion;
 *     PaTime inputLatency;
 *     PaTime outputLatency;
 *     double sampleRate;
 * }
 * }
 */
public class PaStreamInfo {

    PaStreamInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("structVersion"),
        MemoryLayout.paddingLayout(4),
        PortAudio.C_DOUBLE.withName("inputLatency"),
        PortAudio.C_DOUBLE.withName("outputLatency"),
        PortAudio.C_DOUBLE.withName("sampleRate")
    ).withName("PaStreamInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt structVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("structVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final OfInt structVersion$layout() {
        return structVersion$LAYOUT;
    }

    private static final long structVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final long structVersion$offset() {
        return structVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static int structVersion(MemorySegment struct) {
        return struct.get(structVersion$LAYOUT, structVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static void structVersion(MemorySegment struct, int fieldValue) {
        struct.set(structVersion$LAYOUT, structVersion$OFFSET, fieldValue);
    }

    private static final OfDouble inputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("inputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime inputLatency
     * }
     */
    public static final OfDouble inputLatency$layout() {
        return inputLatency$LAYOUT;
    }

    private static final long inputLatency$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime inputLatency
     * }
     */
    public static final long inputLatency$offset() {
        return inputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime inputLatency
     * }
     */
    public static double inputLatency(MemorySegment struct) {
        return struct.get(inputLatency$LAYOUT, inputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime inputLatency
     * }
     */
    public static void inputLatency(MemorySegment struct, double fieldValue) {
        struct.set(inputLatency$LAYOUT, inputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble outputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("outputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime outputLatency
     * }
     */
    public static final OfDouble outputLatency$layout() {
        return outputLatency$LAYOUT;
    }

    private static final long outputLatency$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime outputLatency
     * }
     */
    public static final long outputLatency$offset() {
        return outputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime outputLatency
     * }
     */
    public static double outputLatency(MemorySegment struct) {
        return struct.get(outputLatency$LAYOUT, outputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime outputLatency
     * }
     */
    public static void outputLatency(MemorySegment struct, double fieldValue) {
        struct.set(outputLatency$LAYOUT, outputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble sampleRate$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sampleRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sampleRate
     * }
     */
    public static final OfDouble sampleRate$layout() {
        return sampleRate$LAYOUT;
    }

    private static final long sampleRate$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sampleRate
     * }
     */
    public static final long sampleRate$offset() {
        return sampleRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sampleRate
     * }
     */
    public static double sampleRate(MemorySegment struct) {
        return struct.get(sampleRate$LAYOUT, sampleRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sampleRate
     * }
     */
    public static void sampleRate(MemorySegment struct, double fieldValue) {
        struct.set(sampleRate$LAYOUT, sampleRate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaStreamParameters {
 *     PaDeviceIndex device;
 *     int channelCount;
 *     PaSampleFormat sampleFormat;
 *     PaTime suggestedLatency;
 *     void *hostApiSpecificStreamInfo;
 * }
 * }
 */
public class PaStreamParameters {

    PaStreamParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("device"),
        PortAudio.C_INT.withName("channelCount"),
        PortAudio.C_LONG.withName("sampleFormat"),
        MemoryLayout.paddingLayout(4),
        PortAudio.C_DOUBLE.withName("suggestedLatency"),
        PortAudio.C_POINTER.withName("hostApiSpecificStreamInfo")
    ).withName("PaStreamParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt device$LAYOUT = (OfInt)$LAYOUT.select(groupElement("device"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaDeviceIndex device
     * }
     */
    public static final OfInt device$layout() {
        return device$LAYOUT;
    }

    private static final long device$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaDeviceIndex device
     * }
     */
    public static final long device$offset() {
        return device$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaDeviceIndex device
     * }
     */
    public static int device(MemorySegment struct) {
        return struct.get(device$LAYOUT, device$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaDeviceIndex device
     * }
     */
    public static void device(MemorySegment struct, int fieldValue) {
        struct.set(device$LAYOUT, device$OFFSET, fieldValue);
    }

    private static final OfInt channelCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("channelCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int channelCount
     * }
     */
    public static final OfInt channelCount$layout() {
        return channelCount$LAYOUT;
    }

    private static final long channelCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int channelCount
     * }
     */
    public static final long channelCount$offset() {
        return channelCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int channelCount
     * }
     */
    public static int channelCount(MemorySegment struct) {
        return struct.get(channelCount$LAYOUT, channelCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int channelCount
     * }
     */
    public static void channelCount(MemorySegment struct, int fieldValue) {
        struct.set(channelCount$LAYOUT, channelCount$OFFSET, fieldValue);
    }

    private static final OfInt sampleFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaSampleFormat sampleFormat
     * }
     */
    public static final OfInt sampleFormat$layout() {
        return sampleFormat$LAYOUT;
    }

    private static final long sampleFormat$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaSampleFormat sampleFormat
     * }
     */
    public static final long sampleFormat$offset() {
        return sampleFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaSampleFormat sampleFormat
     * }
     */
    public static int sampleFormat(MemorySegment struct) {
        return struct.get(sampleFormat$LAYOUT, sampleFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaSampleFormat sampleFormat
     * }
     */
    public static void sampleFormat(MemorySegment struct, int fieldValue) {
        struct.set(sampleFormat$LAYOUT, sampleFormat$OFFSET, fieldValue);
    }

    private static final OfDouble suggestedLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("suggestedLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime suggestedLatency
     * }
     */
    public static final OfDouble suggestedLatency$layout() {
        return suggestedLatency$LAYOUT;
    }

    private static final long suggestedLatency$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime suggestedLatency
     * }
     */
    public static final long suggestedLatency$offset() {
        return suggestedLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime suggestedLatency
     * }
     */
    public static double suggestedLatency(MemorySegment struct) {
        return struct.get(suggestedLatency$LAYOUT, suggestedLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime suggestedLatency
     * }
     */
    public static void suggestedLatency(MemorySegment struct, double fieldValue) {
        struct.set(suggestedLatency$LAYOUT, suggestedLatency$OFFSET, fieldValue);
    }

    private static final AddressLayout hostApiSpecificStreamInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hostApiSpecificStreamInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *hostApiSpecificStreamInfo
     * }
     */
    public static final AddressLayout hostApiSpecificStreamInfo$layout() {
        return hostApiSpecificStreamInfo$LAYOUT;
    }

    private static final long hostApiSpecificStreamInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *hostApiSpecificStreamInfo
     * }
     */
    public static final long hostApiSpecificStreamInfo$offset() {
        return hostApiSpecificStreamInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *hostApiSpecificStreamInfo
     * }
     */
    public static MemorySegment hostApiSpecificStreamInfo(MemorySegment struct) {
        return struct.get(hostApiSpecificStreamInfo$LAYOUT, hostApiSpecificStreamInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *hostApiSpecificStreamInfo
     * }
     */
    public static void hostApiSpecificStreamInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hostApiSpecificStreamInfo$LAYOUT, hostApiSpecificStreamInfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


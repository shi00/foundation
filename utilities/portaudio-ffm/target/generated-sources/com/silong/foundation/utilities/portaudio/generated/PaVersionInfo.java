// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaVersionInfo {
 *     int versionMajor;
 *     int versionMinor;
 *     int versionSubMinor;
 *     const char *versionControlRevision;
 *     const char *versionText;
 * }
 * }
 */
public class PaVersionInfo {

    PaVersionInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("versionMajor"),
        PortAudio.C_INT.withName("versionMinor"),
        PortAudio.C_INT.withName("versionSubMinor"),
        MemoryLayout.paddingLayout(4),
        PortAudio.C_POINTER.withName("versionControlRevision"),
        PortAudio.C_POINTER.withName("versionText")
    ).withName("PaVersionInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt versionMajor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("versionMajor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int versionMajor
     * }
     */
    public static final OfInt versionMajor$layout() {
        return versionMajor$LAYOUT;
    }

    private static final long versionMajor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int versionMajor
     * }
     */
    public static final long versionMajor$offset() {
        return versionMajor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int versionMajor
     * }
     */
    public static int versionMajor(MemorySegment struct) {
        return struct.get(versionMajor$LAYOUT, versionMajor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int versionMajor
     * }
     */
    public static void versionMajor(MemorySegment struct, int fieldValue) {
        struct.set(versionMajor$LAYOUT, versionMajor$OFFSET, fieldValue);
    }

    private static final OfInt versionMinor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("versionMinor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int versionMinor
     * }
     */
    public static final OfInt versionMinor$layout() {
        return versionMinor$LAYOUT;
    }

    private static final long versionMinor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int versionMinor
     * }
     */
    public static final long versionMinor$offset() {
        return versionMinor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int versionMinor
     * }
     */
    public static int versionMinor(MemorySegment struct) {
        return struct.get(versionMinor$LAYOUT, versionMinor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int versionMinor
     * }
     */
    public static void versionMinor(MemorySegment struct, int fieldValue) {
        struct.set(versionMinor$LAYOUT, versionMinor$OFFSET, fieldValue);
    }

    private static final OfInt versionSubMinor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("versionSubMinor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int versionSubMinor
     * }
     */
    public static final OfInt versionSubMinor$layout() {
        return versionSubMinor$LAYOUT;
    }

    private static final long versionSubMinor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int versionSubMinor
     * }
     */
    public static final long versionSubMinor$offset() {
        return versionSubMinor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int versionSubMinor
     * }
     */
    public static int versionSubMinor(MemorySegment struct) {
        return struct.get(versionSubMinor$LAYOUT, versionSubMinor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int versionSubMinor
     * }
     */
    public static void versionSubMinor(MemorySegment struct, int fieldValue) {
        struct.set(versionSubMinor$LAYOUT, versionSubMinor$OFFSET, fieldValue);
    }

    private static final AddressLayout versionControlRevision$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("versionControlRevision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *versionControlRevision
     * }
     */
    public static final AddressLayout versionControlRevision$layout() {
        return versionControlRevision$LAYOUT;
    }

    private static final long versionControlRevision$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *versionControlRevision
     * }
     */
    public static final long versionControlRevision$offset() {
        return versionControlRevision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *versionControlRevision
     * }
     */
    public static MemorySegment versionControlRevision(MemorySegment struct) {
        return struct.get(versionControlRevision$LAYOUT, versionControlRevision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *versionControlRevision
     * }
     */
    public static void versionControlRevision(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(versionControlRevision$LAYOUT, versionControlRevision$OFFSET, fieldValue);
    }

    private static final AddressLayout versionText$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("versionText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *versionText
     * }
     */
    public static final AddressLayout versionText$layout() {
        return versionText$LAYOUT;
    }

    private static final long versionText$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *versionText
     * }
     */
    public static final long versionText$offset() {
        return versionText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *versionText
     * }
     */
    public static MemorySegment versionText(MemorySegment struct) {
        return struct.get(versionText$LAYOUT, versionText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *versionText
     * }
     */
    public static void versionText(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(versionText$LAYOUT, versionText$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaHostErrorInfo {
 *     PaHostApiTypeId hostApiType;
 *     long errorCode;
 *     const char *errorText;
 * }
 * }
 */
public class PaHostErrorInfo {

    PaHostErrorInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("hostApiType"),
        PortAudio.C_LONG.withName("errorCode"),
        PortAudio.C_POINTER.withName("errorText")
    ).withName("PaHostErrorInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt hostApiType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostApiType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaHostApiTypeId hostApiType
     * }
     */
    public static final OfInt hostApiType$layout() {
        return hostApiType$LAYOUT;
    }

    private static final long hostApiType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaHostApiTypeId hostApiType
     * }
     */
    public static final long hostApiType$offset() {
        return hostApiType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaHostApiTypeId hostApiType
     * }
     */
    public static int hostApiType(MemorySegment struct) {
        return struct.get(hostApiType$LAYOUT, hostApiType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaHostApiTypeId hostApiType
     * }
     */
    public static void hostApiType(MemorySegment struct, int fieldValue) {
        struct.set(hostApiType$LAYOUT, hostApiType$OFFSET, fieldValue);
    }

    private static final OfInt errorCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("errorCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long errorCode
     * }
     */
    public static final OfInt errorCode$layout() {
        return errorCode$LAYOUT;
    }

    private static final long errorCode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long errorCode
     * }
     */
    public static final long errorCode$offset() {
        return errorCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long errorCode
     * }
     */
    public static int errorCode(MemorySegment struct) {
        return struct.get(errorCode$LAYOUT, errorCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long errorCode
     * }
     */
    public static void errorCode(MemorySegment struct, int fieldValue) {
        struct.set(errorCode$LAYOUT, errorCode$OFFSET, fieldValue);
    }

    private static final AddressLayout errorText$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("errorText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *errorText
     * }
     */
    public static final AddressLayout errorText$layout() {
        return errorText$LAYOUT;
    }

    private static final long errorText$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *errorText
     * }
     */
    public static final long errorText$offset() {
        return errorText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *errorText
     * }
     */
    public static MemorySegment errorText(MemorySegment struct) {
        return struct.get(errorText$LAYOUT, errorText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *errorText
     * }
     */
    public static void errorText(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(errorText$LAYOUT, errorText$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


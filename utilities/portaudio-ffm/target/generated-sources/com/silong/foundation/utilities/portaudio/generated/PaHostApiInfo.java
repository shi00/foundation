// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaHostApiInfo {
 *     int structVersion;
 *     PaHostApiTypeId type;
 *     const char *name;
 *     int deviceCount;
 *     PaDeviceIndex defaultInputDevice;
 *     PaDeviceIndex defaultOutputDevice;
 * }
 * }
 */
public class PaHostApiInfo {

    PaHostApiInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("structVersion"),
        PortAudio.C_INT.withName("type"),
        PortAudio.C_POINTER.withName("name"),
        PortAudio.C_INT.withName("deviceCount"),
        PortAudio.C_INT.withName("defaultInputDevice"),
        PortAudio.C_INT.withName("defaultOutputDevice"),
        MemoryLayout.paddingLayout(4)
    ).withName("PaHostApiInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt structVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("structVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final OfInt structVersion$layout() {
        return structVersion$LAYOUT;
    }

    private static final long structVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final long structVersion$offset() {
        return structVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static int structVersion(MemorySegment struct) {
        return struct.get(structVersion$LAYOUT, structVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static void structVersion(MemorySegment struct, int fieldValue) {
        struct.set(structVersion$LAYOUT, structVersion$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaHostApiTypeId type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaHostApiTypeId type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaHostApiTypeId type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaHostApiTypeId type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt deviceCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int deviceCount
     * }
     */
    public static final OfInt deviceCount$layout() {
        return deviceCount$LAYOUT;
    }

    private static final long deviceCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int deviceCount
     * }
     */
    public static final long deviceCount$offset() {
        return deviceCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int deviceCount
     * }
     */
    public static int deviceCount(MemorySegment struct) {
        return struct.get(deviceCount$LAYOUT, deviceCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int deviceCount
     * }
     */
    public static void deviceCount(MemorySegment struct, int fieldValue) {
        struct.set(deviceCount$LAYOUT, deviceCount$OFFSET, fieldValue);
    }

    private static final OfInt defaultInputDevice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("defaultInputDevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultInputDevice
     * }
     */
    public static final OfInt defaultInputDevice$layout() {
        return defaultInputDevice$LAYOUT;
    }

    private static final long defaultInputDevice$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultInputDevice
     * }
     */
    public static final long defaultInputDevice$offset() {
        return defaultInputDevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultInputDevice
     * }
     */
    public static int defaultInputDevice(MemorySegment struct) {
        return struct.get(defaultInputDevice$LAYOUT, defaultInputDevice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultInputDevice
     * }
     */
    public static void defaultInputDevice(MemorySegment struct, int fieldValue) {
        struct.set(defaultInputDevice$LAYOUT, defaultInputDevice$OFFSET, fieldValue);
    }

    private static final OfInt defaultOutputDevice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("defaultOutputDevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultOutputDevice
     * }
     */
    public static final OfInt defaultOutputDevice$layout() {
        return defaultOutputDevice$LAYOUT;
    }

    private static final long defaultOutputDevice$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultOutputDevice
     * }
     */
    public static final long defaultOutputDevice$offset() {
        return defaultOutputDevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultOutputDevice
     * }
     */
    public static int defaultOutputDevice(MemorySegment struct) {
        return struct.get(defaultOutputDevice$LAYOUT, defaultOutputDevice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaDeviceIndex defaultOutputDevice
     * }
     */
    public static void defaultOutputDevice(MemorySegment struct, int fieldValue) {
        struct.set(defaultOutputDevice$LAYOUT, defaultOutputDevice$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


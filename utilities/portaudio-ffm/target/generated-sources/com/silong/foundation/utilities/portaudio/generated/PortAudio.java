// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class PortAudio {

    PortAudio() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;

    private static class Pa_GetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Pa_GetVersion()
     * }
     */
    public static FunctionDescriptor Pa_GetVersion$descriptor() {
        return Pa_GetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Pa_GetVersion()
     * }
     */
    public static MethodHandle Pa_GetVersion$handle() {
        return Pa_GetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Pa_GetVersion()
     * }
     */
    public static MemorySegment Pa_GetVersion$address() {
        return Pa_GetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Pa_GetVersion()
     * }
     */
    public static int Pa_GetVersion() {
        var mh$ = Pa_GetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetVersionText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetVersionText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Pa_GetVersionText()
     * }
     */
    public static FunctionDescriptor Pa_GetVersionText$descriptor() {
        return Pa_GetVersionText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Pa_GetVersionText()
     * }
     */
    public static MethodHandle Pa_GetVersionText$handle() {
        return Pa_GetVersionText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Pa_GetVersionText()
     * }
     */
    public static MemorySegment Pa_GetVersionText$address() {
        return Pa_GetVersionText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Pa_GetVersionText()
     * }
     */
    public static MemorySegment Pa_GetVersionText() {
        var mh$ = Pa_GetVersionText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetVersionText");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetVersionInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetVersionInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const PaVersionInfo *Pa_GetVersionInfo()
     * }
     */
    public static FunctionDescriptor Pa_GetVersionInfo$descriptor() {
        return Pa_GetVersionInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const PaVersionInfo *Pa_GetVersionInfo()
     * }
     */
    public static MethodHandle Pa_GetVersionInfo$handle() {
        return Pa_GetVersionInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const PaVersionInfo *Pa_GetVersionInfo()
     * }
     */
    public static MemorySegment Pa_GetVersionInfo$address() {
        return Pa_GetVersionInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const PaVersionInfo *Pa_GetVersionInfo()
     * }
     */
    public static MemorySegment Pa_GetVersionInfo() {
        var mh$ = Pa_GetVersionInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetVersionInfo");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int PaError
     * }
     */
    public static final OfInt PaError = PortAudio.C_INT;
    private static final int paNoError = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paNoError = 0
     * }
     */
    public static int paNoError() {
        return paNoError;
    }
    private static final int paNotInitialized = (int)-10000L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paNotInitialized = -10000
     * }
     */
    public static int paNotInitialized() {
        return paNotInitialized;
    }
    private static final int paUnanticipatedHostError = (int)-9999L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paUnanticipatedHostError = -9999
     * }
     */
    public static int paUnanticipatedHostError() {
        return paUnanticipatedHostError;
    }
    private static final int paInvalidChannelCount = (int)-9998L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInvalidChannelCount = -9998
     * }
     */
    public static int paInvalidChannelCount() {
        return paInvalidChannelCount;
    }
    private static final int paInvalidSampleRate = (int)-9997L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInvalidSampleRate = -9997
     * }
     */
    public static int paInvalidSampleRate() {
        return paInvalidSampleRate;
    }
    private static final int paInvalidDevice = (int)-9996L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInvalidDevice = -9996
     * }
     */
    public static int paInvalidDevice() {
        return paInvalidDevice;
    }
    private static final int paInvalidFlag = (int)-9995L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInvalidFlag = -9995
     * }
     */
    public static int paInvalidFlag() {
        return paInvalidFlag;
    }
    private static final int paSampleFormatNotSupported = (int)-9994L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paSampleFormatNotSupported = -9994
     * }
     */
    public static int paSampleFormatNotSupported() {
        return paSampleFormatNotSupported;
    }
    private static final int paBadIODeviceCombination = (int)-9993L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paBadIODeviceCombination = -9993
     * }
     */
    public static int paBadIODeviceCombination() {
        return paBadIODeviceCombination;
    }
    private static final int paInsufficientMemory = (int)-9992L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInsufficientMemory = -9992
     * }
     */
    public static int paInsufficientMemory() {
        return paInsufficientMemory;
    }
    private static final int paBufferTooBig = (int)-9991L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paBufferTooBig = -9991
     * }
     */
    public static int paBufferTooBig() {
        return paBufferTooBig;
    }
    private static final int paBufferTooSmall = (int)-9990L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paBufferTooSmall = -9990
     * }
     */
    public static int paBufferTooSmall() {
        return paBufferTooSmall;
    }
    private static final int paNullCallback = (int)-9989L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paNullCallback = -9989
     * }
     */
    public static int paNullCallback() {
        return paNullCallback;
    }
    private static final int paBadStreamPtr = (int)-9988L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paBadStreamPtr = -9988
     * }
     */
    public static int paBadStreamPtr() {
        return paBadStreamPtr;
    }
    private static final int paTimedOut = (int)-9987L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paTimedOut = -9987
     * }
     */
    public static int paTimedOut() {
        return paTimedOut;
    }
    private static final int paInternalError = (int)-9986L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInternalError = -9986
     * }
     */
    public static int paInternalError() {
        return paInternalError;
    }
    private static final int paDeviceUnavailable = (int)-9985L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paDeviceUnavailable = -9985
     * }
     */
    public static int paDeviceUnavailable() {
        return paDeviceUnavailable;
    }
    private static final int paIncompatibleHostApiSpecificStreamInfo = (int)-9984L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paIncompatibleHostApiSpecificStreamInfo = -9984
     * }
     */
    public static int paIncompatibleHostApiSpecificStreamInfo() {
        return paIncompatibleHostApiSpecificStreamInfo;
    }
    private static final int paStreamIsStopped = (int)-9983L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paStreamIsStopped = -9983
     * }
     */
    public static int paStreamIsStopped() {
        return paStreamIsStopped;
    }
    private static final int paStreamIsNotStopped = (int)-9982L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paStreamIsNotStopped = -9982
     * }
     */
    public static int paStreamIsNotStopped() {
        return paStreamIsNotStopped;
    }
    private static final int paInputOverflowed = (int)-9981L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInputOverflowed = -9981
     * }
     */
    public static int paInputOverflowed() {
        return paInputOverflowed;
    }
    private static final int paOutputUnderflowed = (int)-9980L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paOutputUnderflowed = -9980
     * }
     */
    public static int paOutputUnderflowed() {
        return paOutputUnderflowed;
    }
    private static final int paHostApiNotFound = (int)-9979L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paHostApiNotFound = -9979
     * }
     */
    public static int paHostApiNotFound() {
        return paHostApiNotFound;
    }
    private static final int paInvalidHostApi = (int)-9978L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paInvalidHostApi = -9978
     * }
     */
    public static int paInvalidHostApi() {
        return paInvalidHostApi;
    }
    private static final int paCanNotReadFromACallbackStream = (int)-9977L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paCanNotReadFromACallbackStream = -9977
     * }
     */
    public static int paCanNotReadFromACallbackStream() {
        return paCanNotReadFromACallbackStream;
    }
    private static final int paCanNotWriteToACallbackStream = (int)-9976L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paCanNotWriteToACallbackStream = -9976
     * }
     */
    public static int paCanNotWriteToACallbackStream() {
        return paCanNotWriteToACallbackStream;
    }
    private static final int paCanNotReadFromAnOutputOnlyStream = (int)-9975L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paCanNotReadFromAnOutputOnlyStream = -9975
     * }
     */
    public static int paCanNotReadFromAnOutputOnlyStream() {
        return paCanNotReadFromAnOutputOnlyStream;
    }
    private static final int paCanNotWriteToAnInputOnlyStream = (int)-9974L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paCanNotWriteToAnInputOnlyStream = -9974
     * }
     */
    public static int paCanNotWriteToAnInputOnlyStream() {
        return paCanNotWriteToAnInputOnlyStream;
    }
    private static final int paIncompatibleStreamHostApi = (int)-9973L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paIncompatibleStreamHostApi = -9973
     * }
     */
    public static int paIncompatibleStreamHostApi() {
        return paIncompatibleStreamHostApi;
    }
    private static final int paBadBufferPtr = (int)-9972L;
    /**
     * {@snippet lang=c :
     * enum PaErrorCode.paBadBufferPtr = -9972
     * }
     */
    public static int paBadBufferPtr() {
        return paBadBufferPtr;
    }

    private static class Pa_GetErrorText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER,
            PortAudio.C_INT
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetErrorText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Pa_GetErrorText(PaError errorCode)
     * }
     */
    public static FunctionDescriptor Pa_GetErrorText$descriptor() {
        return Pa_GetErrorText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Pa_GetErrorText(PaError errorCode)
     * }
     */
    public static MethodHandle Pa_GetErrorText$handle() {
        return Pa_GetErrorText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Pa_GetErrorText(PaError errorCode)
     * }
     */
    public static MemorySegment Pa_GetErrorText$address() {
        return Pa_GetErrorText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Pa_GetErrorText(PaError errorCode)
     * }
     */
    public static MemorySegment Pa_GetErrorText(int errorCode) {
        var mh$ = Pa_GetErrorText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetErrorText", errorCode);
            }
            return (MemorySegment)mh$.invokeExact(errorCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_Initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_Initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_Initialize()
     * }
     */
    public static FunctionDescriptor Pa_Initialize$descriptor() {
        return Pa_Initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_Initialize()
     * }
     */
    public static MethodHandle Pa_Initialize$handle() {
        return Pa_Initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_Initialize()
     * }
     */
    public static MemorySegment Pa_Initialize$address() {
        return Pa_Initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_Initialize()
     * }
     */
    public static int Pa_Initialize() {
        var mh$ = Pa_Initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_Initialize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_Terminate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_Terminate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_Terminate()
     * }
     */
    public static FunctionDescriptor Pa_Terminate$descriptor() {
        return Pa_Terminate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_Terminate()
     * }
     */
    public static MethodHandle Pa_Terminate$handle() {
        return Pa_Terminate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_Terminate()
     * }
     */
    public static MemorySegment Pa_Terminate$address() {
        return Pa_Terminate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_Terminate()
     * }
     */
    public static int Pa_Terminate() {
        var mh$ = Pa_Terminate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_Terminate");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int PaDeviceIndex
     * }
     */
    public static final OfInt PaDeviceIndex = PortAudio.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int PaHostApiIndex
     * }
     */
    public static final OfInt PaHostApiIndex = PortAudio.C_INT;

    private static class Pa_GetHostApiCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetHostApiCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetHostApiCount()
     * }
     */
    public static FunctionDescriptor Pa_GetHostApiCount$descriptor() {
        return Pa_GetHostApiCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetHostApiCount()
     * }
     */
    public static MethodHandle Pa_GetHostApiCount$handle() {
        return Pa_GetHostApiCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetHostApiCount()
     * }
     */
    public static MemorySegment Pa_GetHostApiCount$address() {
        return Pa_GetHostApiCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetHostApiCount()
     * }
     */
    public static int Pa_GetHostApiCount() {
        var mh$ = Pa_GetHostApiCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetHostApiCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetDefaultHostApi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetDefaultHostApi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetDefaultHostApi()
     * }
     */
    public static FunctionDescriptor Pa_GetDefaultHostApi$descriptor() {
        return Pa_GetDefaultHostApi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetDefaultHostApi()
     * }
     */
    public static MethodHandle Pa_GetDefaultHostApi$handle() {
        return Pa_GetDefaultHostApi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetDefaultHostApi()
     * }
     */
    public static MemorySegment Pa_GetDefaultHostApi$address() {
        return Pa_GetDefaultHostApi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaHostApiIndex Pa_GetDefaultHostApi()
     * }
     */
    public static int Pa_GetDefaultHostApi() {
        var mh$ = Pa_GetDefaultHostApi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetDefaultHostApi");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int paInDevelopment = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paInDevelopment = 0
     * }
     */
    public static int paInDevelopment() {
        return paInDevelopment;
    }
    private static final int paDirectSound = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paDirectSound = 1
     * }
     */
    public static int paDirectSound() {
        return paDirectSound;
    }
    private static final int paMME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paMME = 2
     * }
     */
    public static int paMME() {
        return paMME;
    }
    private static final int paASIO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paASIO = 3
     * }
     */
    public static int paASIO() {
        return paASIO;
    }
    private static final int paSoundManager = (int)4L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paSoundManager = 4
     * }
     */
    public static int paSoundManager() {
        return paSoundManager;
    }
    private static final int paCoreAudio = (int)5L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paCoreAudio = 5
     * }
     */
    public static int paCoreAudio() {
        return paCoreAudio;
    }
    private static final int paOSS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paOSS = 7
     * }
     */
    public static int paOSS() {
        return paOSS;
    }
    private static final int paALSA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paALSA = 8
     * }
     */
    public static int paALSA() {
        return paALSA;
    }
    private static final int paAL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paAL = 9
     * }
     */
    public static int paAL() {
        return paAL;
    }
    private static final int paBeOS = (int)10L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paBeOS = 10
     * }
     */
    public static int paBeOS() {
        return paBeOS;
    }
    private static final int paWDMKS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paWDMKS = 11
     * }
     */
    public static int paWDMKS() {
        return paWDMKS;
    }
    private static final int paJACK = (int)12L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paJACK = 12
     * }
     */
    public static int paJACK() {
        return paJACK;
    }
    private static final int paWASAPI = (int)13L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paWASAPI = 13
     * }
     */
    public static int paWASAPI() {
        return paWASAPI;
    }
    private static final int paAudioScienceHPI = (int)14L;
    /**
     * {@snippet lang=c :
     * enum PaHostApiTypeId.paAudioScienceHPI = 14
     * }
     */
    public static int paAudioScienceHPI() {
        return paAudioScienceHPI;
    }

    private static class Pa_GetHostApiInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER,
            PortAudio.C_INT
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetHostApiInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const PaHostApiInfo *Pa_GetHostApiInfo(PaHostApiIndex hostApi)
     * }
     */
    public static FunctionDescriptor Pa_GetHostApiInfo$descriptor() {
        return Pa_GetHostApiInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const PaHostApiInfo *Pa_GetHostApiInfo(PaHostApiIndex hostApi)
     * }
     */
    public static MethodHandle Pa_GetHostApiInfo$handle() {
        return Pa_GetHostApiInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const PaHostApiInfo *Pa_GetHostApiInfo(PaHostApiIndex hostApi)
     * }
     */
    public static MemorySegment Pa_GetHostApiInfo$address() {
        return Pa_GetHostApiInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const PaHostApiInfo *Pa_GetHostApiInfo(PaHostApiIndex hostApi)
     * }
     */
    public static MemorySegment Pa_GetHostApiInfo(int hostApi) {
        var mh$ = Pa_GetHostApiInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetHostApiInfo", hostApi);
            }
            return (MemorySegment)mh$.invokeExact(hostApi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_HostApiTypeIdToHostApiIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_INT
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_HostApiTypeIdToHostApiIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId type)
     * }
     */
    public static FunctionDescriptor Pa_HostApiTypeIdToHostApiIndex$descriptor() {
        return Pa_HostApiTypeIdToHostApiIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId type)
     * }
     */
    public static MethodHandle Pa_HostApiTypeIdToHostApiIndex$handle() {
        return Pa_HostApiTypeIdToHostApiIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaHostApiIndex Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId type)
     * }
     */
    public static MemorySegment Pa_HostApiTypeIdToHostApiIndex$address() {
        return Pa_HostApiTypeIdToHostApiIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaHostApiIndex Pa_HostApiTypeIdToHostApiIndex(PaHostApiTypeId type)
     * }
     */
    public static int Pa_HostApiTypeIdToHostApiIndex(int type) {
        var mh$ = Pa_HostApiTypeIdToHostApiIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_HostApiTypeIdToHostApiIndex", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_HostApiDeviceIndexToDeviceIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_INT,
            PortAudio.C_INT
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_HostApiDeviceIndexToDeviceIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_HostApiDeviceIndexToDeviceIndex(PaHostApiIndex hostApi, int hostApiDeviceIndex)
     * }
     */
    public static FunctionDescriptor Pa_HostApiDeviceIndexToDeviceIndex$descriptor() {
        return Pa_HostApiDeviceIndexToDeviceIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_HostApiDeviceIndexToDeviceIndex(PaHostApiIndex hostApi, int hostApiDeviceIndex)
     * }
     */
    public static MethodHandle Pa_HostApiDeviceIndexToDeviceIndex$handle() {
        return Pa_HostApiDeviceIndexToDeviceIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_HostApiDeviceIndexToDeviceIndex(PaHostApiIndex hostApi, int hostApiDeviceIndex)
     * }
     */
    public static MemorySegment Pa_HostApiDeviceIndexToDeviceIndex$address() {
        return Pa_HostApiDeviceIndexToDeviceIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaDeviceIndex Pa_HostApiDeviceIndexToDeviceIndex(PaHostApiIndex hostApi, int hostApiDeviceIndex)
     * }
     */
    public static int Pa_HostApiDeviceIndexToDeviceIndex(int hostApi, int hostApiDeviceIndex) {
        var mh$ = Pa_HostApiDeviceIndexToDeviceIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_HostApiDeviceIndexToDeviceIndex", hostApi, hostApiDeviceIndex);
            }
            return (int)mh$.invokeExact(hostApi, hostApiDeviceIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetLastHostErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetLastHostErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const PaHostErrorInfo *Pa_GetLastHostErrorInfo()
     * }
     */
    public static FunctionDescriptor Pa_GetLastHostErrorInfo$descriptor() {
        return Pa_GetLastHostErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const PaHostErrorInfo *Pa_GetLastHostErrorInfo()
     * }
     */
    public static MethodHandle Pa_GetLastHostErrorInfo$handle() {
        return Pa_GetLastHostErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const PaHostErrorInfo *Pa_GetLastHostErrorInfo()
     * }
     */
    public static MemorySegment Pa_GetLastHostErrorInfo$address() {
        return Pa_GetLastHostErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const PaHostErrorInfo *Pa_GetLastHostErrorInfo()
     * }
     */
    public static MemorySegment Pa_GetLastHostErrorInfo() {
        var mh$ = Pa_GetLastHostErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetLastHostErrorInfo");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetDeviceCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetDeviceCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDeviceCount()
     * }
     */
    public static FunctionDescriptor Pa_GetDeviceCount$descriptor() {
        return Pa_GetDeviceCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDeviceCount()
     * }
     */
    public static MethodHandle Pa_GetDeviceCount$handle() {
        return Pa_GetDeviceCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDeviceCount()
     * }
     */
    public static MemorySegment Pa_GetDeviceCount$address() {
        return Pa_GetDeviceCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDeviceCount()
     * }
     */
    public static int Pa_GetDeviceCount() {
        var mh$ = Pa_GetDeviceCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetDeviceCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetDefaultInputDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetDefaultInputDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultInputDevice()
     * }
     */
    public static FunctionDescriptor Pa_GetDefaultInputDevice$descriptor() {
        return Pa_GetDefaultInputDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultInputDevice()
     * }
     */
    public static MethodHandle Pa_GetDefaultInputDevice$handle() {
        return Pa_GetDefaultInputDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultInputDevice()
     * }
     */
    public static MemorySegment Pa_GetDefaultInputDevice$address() {
        return Pa_GetDefaultInputDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultInputDevice()
     * }
     */
    public static int Pa_GetDefaultInputDevice() {
        var mh$ = Pa_GetDefaultInputDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetDefaultInputDevice");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetDefaultOutputDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT    );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetDefaultOutputDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultOutputDevice()
     * }
     */
    public static FunctionDescriptor Pa_GetDefaultOutputDevice$descriptor() {
        return Pa_GetDefaultOutputDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultOutputDevice()
     * }
     */
    public static MethodHandle Pa_GetDefaultOutputDevice$handle() {
        return Pa_GetDefaultOutputDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultOutputDevice()
     * }
     */
    public static MemorySegment Pa_GetDefaultOutputDevice$address() {
        return Pa_GetDefaultOutputDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaDeviceIndex Pa_GetDefaultOutputDevice()
     * }
     */
    public static int Pa_GetDefaultOutputDevice() {
        var mh$ = Pa_GetDefaultOutputDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetDefaultOutputDevice");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef double PaTime
     * }
     */
    public static final OfDouble PaTime = PortAudio.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef unsigned long PaSampleFormat
     * }
     */
    public static final OfInt PaSampleFormat = PortAudio.C_LONG;

    private static class Pa_GetDeviceInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER,
            PortAudio.C_INT
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetDeviceInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const PaDeviceInfo *Pa_GetDeviceInfo(PaDeviceIndex device)
     * }
     */
    public static FunctionDescriptor Pa_GetDeviceInfo$descriptor() {
        return Pa_GetDeviceInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const PaDeviceInfo *Pa_GetDeviceInfo(PaDeviceIndex device)
     * }
     */
    public static MethodHandle Pa_GetDeviceInfo$handle() {
        return Pa_GetDeviceInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const PaDeviceInfo *Pa_GetDeviceInfo(PaDeviceIndex device)
     * }
     */
    public static MemorySegment Pa_GetDeviceInfo$address() {
        return Pa_GetDeviceInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const PaDeviceInfo *Pa_GetDeviceInfo(PaDeviceIndex device)
     * }
     */
    public static MemorySegment Pa_GetDeviceInfo(int device) {
        var mh$ = Pa_GetDeviceInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetDeviceInfo", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_IsFormatSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER,
            PortAudio.C_DOUBLE
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_IsFormatSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_IsFormatSupported(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate)
     * }
     */
    public static FunctionDescriptor Pa_IsFormatSupported$descriptor() {
        return Pa_IsFormatSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_IsFormatSupported(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate)
     * }
     */
    public static MethodHandle Pa_IsFormatSupported$handle() {
        return Pa_IsFormatSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_IsFormatSupported(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate)
     * }
     */
    public static MemorySegment Pa_IsFormatSupported$address() {
        return Pa_IsFormatSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_IsFormatSupported(const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate)
     * }
     */
    public static int Pa_IsFormatSupported(MemorySegment inputParameters, MemorySegment outputParameters, double sampleRate) {
        var mh$ = Pa_IsFormatSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_IsFormatSupported", inputParameters, outputParameters, sampleRate);
            }
            return (int)mh$.invokeExact(inputParameters, outputParameters, sampleRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long PaStreamFlags
     * }
     */
    public static final OfInt PaStreamFlags = PortAudio.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long PaStreamCallbackFlags
     * }
     */
    public static final OfInt PaStreamCallbackFlags = PortAudio.C_LONG;
    private static final int paContinue = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PaStreamCallbackResult.paContinue = 0
     * }
     */
    public static int paContinue() {
        return paContinue;
    }
    private static final int paComplete = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PaStreamCallbackResult.paComplete = 1
     * }
     */
    public static int paComplete() {
        return paComplete;
    }
    private static final int paAbort = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PaStreamCallbackResult.paAbort = 2
     * }
     */
    public static int paAbort() {
        return paAbort;
    }

    private static class Pa_OpenStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER,
            PortAudio.C_DOUBLE,
            PortAudio.C_LONG,
            PortAudio.C_LONG,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_OpenStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_OpenStream(PaStream **stream, const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate, unsigned long framesPerBuffer, PaStreamFlags streamFlags, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static FunctionDescriptor Pa_OpenStream$descriptor() {
        return Pa_OpenStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_OpenStream(PaStream **stream, const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate, unsigned long framesPerBuffer, PaStreamFlags streamFlags, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static MethodHandle Pa_OpenStream$handle() {
        return Pa_OpenStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_OpenStream(PaStream **stream, const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate, unsigned long framesPerBuffer, PaStreamFlags streamFlags, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static MemorySegment Pa_OpenStream$address() {
        return Pa_OpenStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_OpenStream(PaStream **stream, const PaStreamParameters *inputParameters, const PaStreamParameters *outputParameters, double sampleRate, unsigned long framesPerBuffer, PaStreamFlags streamFlags, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static int Pa_OpenStream(MemorySegment stream, MemorySegment inputParameters, MemorySegment outputParameters, double sampleRate, int framesPerBuffer, int streamFlags, MemorySegment streamCallback, MemorySegment userData) {
        var mh$ = Pa_OpenStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_OpenStream", stream, inputParameters, outputParameters, sampleRate, framesPerBuffer, streamFlags, streamCallback, userData);
            }
            return (int)mh$.invokeExact(stream, inputParameters, outputParameters, sampleRate, framesPerBuffer, streamFlags, streamCallback, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_OpenDefaultStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_INT,
            PortAudio.C_INT,
            PortAudio.C_LONG,
            PortAudio.C_DOUBLE,
            PortAudio.C_LONG,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_OpenDefaultStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_OpenDefaultStream(PaStream **stream, int numInputChannels, int numOutputChannels, PaSampleFormat sampleFormat, double sampleRate, unsigned long framesPerBuffer, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static FunctionDescriptor Pa_OpenDefaultStream$descriptor() {
        return Pa_OpenDefaultStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_OpenDefaultStream(PaStream **stream, int numInputChannels, int numOutputChannels, PaSampleFormat sampleFormat, double sampleRate, unsigned long framesPerBuffer, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static MethodHandle Pa_OpenDefaultStream$handle() {
        return Pa_OpenDefaultStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_OpenDefaultStream(PaStream **stream, int numInputChannels, int numOutputChannels, PaSampleFormat sampleFormat, double sampleRate, unsigned long framesPerBuffer, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static MemorySegment Pa_OpenDefaultStream$address() {
        return Pa_OpenDefaultStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_OpenDefaultStream(PaStream **stream, int numInputChannels, int numOutputChannels, PaSampleFormat sampleFormat, double sampleRate, unsigned long framesPerBuffer, PaStreamCallback *streamCallback, void *userData)
     * }
     */
    public static int Pa_OpenDefaultStream(MemorySegment stream, int numInputChannels, int numOutputChannels, int sampleFormat, double sampleRate, int framesPerBuffer, MemorySegment streamCallback, MemorySegment userData) {
        var mh$ = Pa_OpenDefaultStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_OpenDefaultStream", stream, numInputChannels, numOutputChannels, sampleFormat, sampleRate, framesPerBuffer, streamCallback, userData);
            }
            return (int)mh$.invokeExact(stream, numInputChannels, numOutputChannels, sampleFormat, sampleRate, framesPerBuffer, streamCallback, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_CloseStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_CloseStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_CloseStream(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_CloseStream$descriptor() {
        return Pa_CloseStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_CloseStream(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_CloseStream$handle() {
        return Pa_CloseStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_CloseStream(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_CloseStream$address() {
        return Pa_CloseStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_CloseStream(PaStream *stream)
     * }
     */
    public static int Pa_CloseStream(MemorySegment stream) {
        var mh$ = Pa_CloseStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_CloseStream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_SetStreamFinishedCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_SetStreamFinishedCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_SetStreamFinishedCallback(PaStream *stream, PaStreamFinishedCallback *streamFinishedCallback)
     * }
     */
    public static FunctionDescriptor Pa_SetStreamFinishedCallback$descriptor() {
        return Pa_SetStreamFinishedCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_SetStreamFinishedCallback(PaStream *stream, PaStreamFinishedCallback *streamFinishedCallback)
     * }
     */
    public static MethodHandle Pa_SetStreamFinishedCallback$handle() {
        return Pa_SetStreamFinishedCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_SetStreamFinishedCallback(PaStream *stream, PaStreamFinishedCallback *streamFinishedCallback)
     * }
     */
    public static MemorySegment Pa_SetStreamFinishedCallback$address() {
        return Pa_SetStreamFinishedCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_SetStreamFinishedCallback(PaStream *stream, PaStreamFinishedCallback *streamFinishedCallback)
     * }
     */
    public static int Pa_SetStreamFinishedCallback(MemorySegment stream, MemorySegment streamFinishedCallback) {
        var mh$ = Pa_SetStreamFinishedCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_SetStreamFinishedCallback", stream, streamFinishedCallback);
            }
            return (int)mh$.invokeExact(stream, streamFinishedCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_StartStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_StartStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_StartStream(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_StartStream$descriptor() {
        return Pa_StartStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_StartStream(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_StartStream$handle() {
        return Pa_StartStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_StartStream(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_StartStream$address() {
        return Pa_StartStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_StartStream(PaStream *stream)
     * }
     */
    public static int Pa_StartStream(MemorySegment stream) {
        var mh$ = Pa_StartStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_StartStream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_StopStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_StopStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_StopStream(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_StopStream$descriptor() {
        return Pa_StopStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_StopStream(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_StopStream$handle() {
        return Pa_StopStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_StopStream(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_StopStream$address() {
        return Pa_StopStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_StopStream(PaStream *stream)
     * }
     */
    public static int Pa_StopStream(MemorySegment stream) {
        var mh$ = Pa_StopStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_StopStream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_AbortStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_AbortStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_AbortStream(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_AbortStream$descriptor() {
        return Pa_AbortStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_AbortStream(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_AbortStream$handle() {
        return Pa_AbortStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_AbortStream(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_AbortStream$address() {
        return Pa_AbortStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_AbortStream(PaStream *stream)
     * }
     */
    public static int Pa_AbortStream(MemorySegment stream) {
        var mh$ = Pa_AbortStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_AbortStream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_IsStreamStopped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_IsStreamStopped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamStopped(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_IsStreamStopped$descriptor() {
        return Pa_IsStreamStopped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamStopped(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_IsStreamStopped$handle() {
        return Pa_IsStreamStopped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamStopped(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_IsStreamStopped$address() {
        return Pa_IsStreamStopped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_IsStreamStopped(PaStream *stream)
     * }
     */
    public static int Pa_IsStreamStopped(MemorySegment stream) {
        var mh$ = Pa_IsStreamStopped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_IsStreamStopped", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_IsStreamActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_IsStreamActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamActive(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_IsStreamActive$descriptor() {
        return Pa_IsStreamActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamActive(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_IsStreamActive$handle() {
        return Pa_IsStreamActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_IsStreamActive(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_IsStreamActive$address() {
        return Pa_IsStreamActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_IsStreamActive(PaStream *stream)
     * }
     */
    public static int Pa_IsStreamActive(MemorySegment stream) {
        var mh$ = Pa_IsStreamActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_IsStreamActive", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetStreamInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_POINTER,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetStreamInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const PaStreamInfo *Pa_GetStreamInfo(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_GetStreamInfo$descriptor() {
        return Pa_GetStreamInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const PaStreamInfo *Pa_GetStreamInfo(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_GetStreamInfo$handle() {
        return Pa_GetStreamInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const PaStreamInfo *Pa_GetStreamInfo(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamInfo$address() {
        return Pa_GetStreamInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const PaStreamInfo *Pa_GetStreamInfo(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamInfo(MemorySegment stream) {
        var mh$ = Pa_GetStreamInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetStreamInfo", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetStreamTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_DOUBLE,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetStreamTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaTime Pa_GetStreamTime(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_GetStreamTime$descriptor() {
        return Pa_GetStreamTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaTime Pa_GetStreamTime(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_GetStreamTime$handle() {
        return Pa_GetStreamTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaTime Pa_GetStreamTime(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamTime$address() {
        return Pa_GetStreamTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaTime Pa_GetStreamTime(PaStream *stream)
     * }
     */
    public static double Pa_GetStreamTime(MemorySegment stream) {
        var mh$ = Pa_GetStreamTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetStreamTime", stream);
            }
            return (double)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetStreamCpuLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_DOUBLE,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetStreamCpuLoad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Pa_GetStreamCpuLoad(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_GetStreamCpuLoad$descriptor() {
        return Pa_GetStreamCpuLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Pa_GetStreamCpuLoad(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_GetStreamCpuLoad$handle() {
        return Pa_GetStreamCpuLoad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Pa_GetStreamCpuLoad(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamCpuLoad$address() {
        return Pa_GetStreamCpuLoad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Pa_GetStreamCpuLoad(PaStream *stream)
     * }
     */
    public static double Pa_GetStreamCpuLoad(MemorySegment stream) {
        var mh$ = Pa_GetStreamCpuLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetStreamCpuLoad", stream);
            }
            return (double)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_ReadStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER,
            PortAudio.C_LONG
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_ReadStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_ReadStream(PaStream *stream, void *buffer, unsigned long frames)
     * }
     */
    public static FunctionDescriptor Pa_ReadStream$descriptor() {
        return Pa_ReadStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_ReadStream(PaStream *stream, void *buffer, unsigned long frames)
     * }
     */
    public static MethodHandle Pa_ReadStream$handle() {
        return Pa_ReadStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_ReadStream(PaStream *stream, void *buffer, unsigned long frames)
     * }
     */
    public static MemorySegment Pa_ReadStream$address() {
        return Pa_ReadStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_ReadStream(PaStream *stream, void *buffer, unsigned long frames)
     * }
     */
    public static int Pa_ReadStream(MemorySegment stream, MemorySegment buffer, int frames) {
        var mh$ = Pa_ReadStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_ReadStream", stream, buffer, frames);
            }
            return (int)mh$.invokeExact(stream, buffer, frames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_WriteStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_POINTER,
            PortAudio.C_POINTER,
            PortAudio.C_LONG
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_WriteStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_WriteStream(PaStream *stream, const void *buffer, unsigned long frames)
     * }
     */
    public static FunctionDescriptor Pa_WriteStream$descriptor() {
        return Pa_WriteStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_WriteStream(PaStream *stream, const void *buffer, unsigned long frames)
     * }
     */
    public static MethodHandle Pa_WriteStream$handle() {
        return Pa_WriteStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_WriteStream(PaStream *stream, const void *buffer, unsigned long frames)
     * }
     */
    public static MemorySegment Pa_WriteStream$address() {
        return Pa_WriteStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_WriteStream(PaStream *stream, const void *buffer, unsigned long frames)
     * }
     */
    public static int Pa_WriteStream(MemorySegment stream, MemorySegment buffer, int frames) {
        var mh$ = Pa_WriteStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_WriteStream", stream, buffer, frames);
            }
            return (int)mh$.invokeExact(stream, buffer, frames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetStreamReadAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_LONG,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetStreamReadAvailable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long Pa_GetStreamReadAvailable(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_GetStreamReadAvailable$descriptor() {
        return Pa_GetStreamReadAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long Pa_GetStreamReadAvailable(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_GetStreamReadAvailable$handle() {
        return Pa_GetStreamReadAvailable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long Pa_GetStreamReadAvailable(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamReadAvailable$address() {
        return Pa_GetStreamReadAvailable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long Pa_GetStreamReadAvailable(PaStream *stream)
     * }
     */
    public static int Pa_GetStreamReadAvailable(MemorySegment stream) {
        var mh$ = Pa_GetStreamReadAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetStreamReadAvailable", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetStreamWriteAvailable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_LONG,
            PortAudio.C_POINTER
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetStreamWriteAvailable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long Pa_GetStreamWriteAvailable(PaStream *stream)
     * }
     */
    public static FunctionDescriptor Pa_GetStreamWriteAvailable$descriptor() {
        return Pa_GetStreamWriteAvailable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long Pa_GetStreamWriteAvailable(PaStream *stream)
     * }
     */
    public static MethodHandle Pa_GetStreamWriteAvailable$handle() {
        return Pa_GetStreamWriteAvailable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long Pa_GetStreamWriteAvailable(PaStream *stream)
     * }
     */
    public static MemorySegment Pa_GetStreamWriteAvailable$address() {
        return Pa_GetStreamWriteAvailable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long Pa_GetStreamWriteAvailable(PaStream *stream)
     * }
     */
    public static int Pa_GetStreamWriteAvailable(MemorySegment stream) {
        var mh$ = Pa_GetStreamWriteAvailable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetStreamWriteAvailable", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_GetSampleSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PortAudio.C_INT,
            PortAudio.C_LONG
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_GetSampleSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PaError Pa_GetSampleSize(PaSampleFormat format)
     * }
     */
    public static FunctionDescriptor Pa_GetSampleSize$descriptor() {
        return Pa_GetSampleSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PaError Pa_GetSampleSize(PaSampleFormat format)
     * }
     */
    public static MethodHandle Pa_GetSampleSize$handle() {
        return Pa_GetSampleSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PaError Pa_GetSampleSize(PaSampleFormat format)
     * }
     */
    public static MemorySegment Pa_GetSampleSize$address() {
        return Pa_GetSampleSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PaError Pa_GetSampleSize(PaSampleFormat format)
     * }
     */
    public static int Pa_GetSampleSize(int format) {
        var mh$ = Pa_GetSampleSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_GetSampleSize", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pa_Sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PortAudio.C_LONG
        );

        public static final MemorySegment ADDR = PortAudio.findOrThrow("Pa_Sleep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Pa_Sleep(long msec)
     * }
     */
    public static FunctionDescriptor Pa_Sleep$descriptor() {
        return Pa_Sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Pa_Sleep(long msec)
     * }
     */
    public static MethodHandle Pa_Sleep$handle() {
        return Pa_Sleep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Pa_Sleep(long msec)
     * }
     */
    public static MemorySegment Pa_Sleep$address() {
        return Pa_Sleep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Pa_Sleep(long msec)
     * }
     */
    public static void Pa_Sleep(int msec) {
        var mh$ = Pa_Sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pa_Sleep", msec);
            }
            mh$.invokeExact(msec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int paNoDevice = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define paNoDevice -1
     * }
     */
    public static int paNoDevice() {
        return paNoDevice;
    }
    private static final int paUseHostApiSpecificDeviceSpecification = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define paUseHostApiSpecificDeviceSpecification -2
     * }
     */
    public static int paUseHostApiSpecificDeviceSpecification() {
        return paUseHostApiSpecificDeviceSpecification;
    }
    private static final int paFloat32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define paFloat32 1
     * }
     */
    public static int paFloat32() {
        return paFloat32;
    }
    private static final int paInt32 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define paInt32 2
     * }
     */
    public static int paInt32() {
        return paInt32;
    }
    private static final int paInt24 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define paInt24 4
     * }
     */
    public static int paInt24() {
        return paInt24;
    }
    private static final int paInt16 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define paInt16 8
     * }
     */
    public static int paInt16() {
        return paInt16;
    }
    private static final int paInt8 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define paInt8 16
     * }
     */
    public static int paInt8() {
        return paInt8;
    }
    private static final int paUInt8 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define paUInt8 32
     * }
     */
    public static int paUInt8() {
        return paUInt8;
    }
    private static final int paCustomFormat = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define paCustomFormat 65536
     * }
     */
    public static int paCustomFormat() {
        return paCustomFormat;
    }
    private static final int paNonInterleaved = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define paNonInterleaved 2147483648
     * }
     */
    public static int paNonInterleaved() {
        return paNonInterleaved;
    }
    private static final int paFormatIsSupported = (int)0L;
    /**
     * {@snippet lang=c :
     * #define paFormatIsSupported 0
     * }
     */
    public static int paFormatIsSupported() {
        return paFormatIsSupported;
    }
    private static final int paFramesPerBufferUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * #define paFramesPerBufferUnspecified 0
     * }
     */
    public static int paFramesPerBufferUnspecified() {
        return paFramesPerBufferUnspecified;
    }
    private static final int paNoFlag = (int)0L;
    /**
     * {@snippet lang=c :
     * #define paNoFlag 0
     * }
     */
    public static int paNoFlag() {
        return paNoFlag;
    }
    private static final int paClipOff = (int)1L;
    /**
     * {@snippet lang=c :
     * #define paClipOff 1
     * }
     */
    public static int paClipOff() {
        return paClipOff;
    }
    private static final int paDitherOff = (int)2L;
    /**
     * {@snippet lang=c :
     * #define paDitherOff 2
     * }
     */
    public static int paDitherOff() {
        return paDitherOff;
    }
    private static final int paNeverDropInput = (int)4L;
    /**
     * {@snippet lang=c :
     * #define paNeverDropInput 4
     * }
     */
    public static int paNeverDropInput() {
        return paNeverDropInput;
    }
    private static final int paPrimeOutputBuffersUsingStreamCallback = (int)8L;
    /**
     * {@snippet lang=c :
     * #define paPrimeOutputBuffersUsingStreamCallback 8
     * }
     */
    public static int paPrimeOutputBuffersUsingStreamCallback() {
        return paPrimeOutputBuffersUsingStreamCallback;
    }
    private static final int paPlatformSpecificFlags = (int)4294901760L;
    /**
     * {@snippet lang=c :
     * #define paPlatformSpecificFlags 4294901760
     * }
     */
    public static int paPlatformSpecificFlags() {
        return paPlatformSpecificFlags;
    }
    private static final int paInputUnderflow = (int)1L;
    /**
     * {@snippet lang=c :
     * #define paInputUnderflow 1
     * }
     */
    public static int paInputUnderflow() {
        return paInputUnderflow;
    }
    private static final int paInputOverflow = (int)2L;
    /**
     * {@snippet lang=c :
     * #define paInputOverflow 2
     * }
     */
    public static int paInputOverflow() {
        return paInputOverflow;
    }
    private static final int paOutputUnderflow = (int)4L;
    /**
     * {@snippet lang=c :
     * #define paOutputUnderflow 4
     * }
     */
    public static int paOutputUnderflow() {
        return paOutputUnderflow;
    }
    private static final int paOutputOverflow = (int)8L;
    /**
     * {@snippet lang=c :
     * #define paOutputOverflow 8
     * }
     */
    public static int paOutputOverflow() {
        return paOutputOverflow;
    }
    private static final int paPrimingOutput = (int)16L;
    /**
     * {@snippet lang=c :
     * #define paPrimingOutput 16
     * }
     */
    public static int paPrimingOutput() {
        return paPrimingOutput;
    }
}


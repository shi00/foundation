// Generated by jextract

package com.silong.foundation.utilities.portaudio.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PaDeviceInfo {
 *     int structVersion;
 *     const char *name;
 *     PaHostApiIndex hostApi;
 *     int maxInputChannels;
 *     int maxOutputChannels;
 *     PaTime defaultLowInputLatency;
 *     PaTime defaultLowOutputLatency;
 *     PaTime defaultHighInputLatency;
 *     PaTime defaultHighOutputLatency;
 *     double defaultSampleRate;
 * }
 * }
 */
public class PaDeviceInfo {

    PaDeviceInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PortAudio.C_INT.withName("structVersion"),
        MemoryLayout.paddingLayout(4),
        PortAudio.C_POINTER.withName("name"),
        PortAudio.C_INT.withName("hostApi"),
        PortAudio.C_INT.withName("maxInputChannels"),
        PortAudio.C_INT.withName("maxOutputChannels"),
        MemoryLayout.paddingLayout(4),
        PortAudio.C_DOUBLE.withName("defaultLowInputLatency"),
        PortAudio.C_DOUBLE.withName("defaultLowOutputLatency"),
        PortAudio.C_DOUBLE.withName("defaultHighInputLatency"),
        PortAudio.C_DOUBLE.withName("defaultHighOutputLatency"),
        PortAudio.C_DOUBLE.withName("defaultSampleRate")
    ).withName("PaDeviceInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt structVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("structVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final OfInt structVersion$layout() {
        return structVersion$LAYOUT;
    }

    private static final long structVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static final long structVersion$offset() {
        return structVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static int structVersion(MemorySegment struct) {
        return struct.get(structVersion$LAYOUT, structVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int structVersion
     * }
     */
    public static void structVersion(MemorySegment struct, int fieldValue) {
        struct.set(structVersion$LAYOUT, structVersion$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt hostApi$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostApi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaHostApiIndex hostApi
     * }
     */
    public static final OfInt hostApi$layout() {
        return hostApi$LAYOUT;
    }

    private static final long hostApi$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaHostApiIndex hostApi
     * }
     */
    public static final long hostApi$offset() {
        return hostApi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaHostApiIndex hostApi
     * }
     */
    public static int hostApi(MemorySegment struct) {
        return struct.get(hostApi$LAYOUT, hostApi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaHostApiIndex hostApi
     * }
     */
    public static void hostApi(MemorySegment struct, int fieldValue) {
        struct.set(hostApi$LAYOUT, hostApi$OFFSET, fieldValue);
    }

    private static final OfInt maxInputChannels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxInputChannels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxInputChannels
     * }
     */
    public static final OfInt maxInputChannels$layout() {
        return maxInputChannels$LAYOUT;
    }

    private static final long maxInputChannels$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxInputChannels
     * }
     */
    public static final long maxInputChannels$offset() {
        return maxInputChannels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxInputChannels
     * }
     */
    public static int maxInputChannels(MemorySegment struct) {
        return struct.get(maxInputChannels$LAYOUT, maxInputChannels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxInputChannels
     * }
     */
    public static void maxInputChannels(MemorySegment struct, int fieldValue) {
        struct.set(maxInputChannels$LAYOUT, maxInputChannels$OFFSET, fieldValue);
    }

    private static final OfInt maxOutputChannels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxOutputChannels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxOutputChannels
     * }
     */
    public static final OfInt maxOutputChannels$layout() {
        return maxOutputChannels$LAYOUT;
    }

    private static final long maxOutputChannels$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxOutputChannels
     * }
     */
    public static final long maxOutputChannels$offset() {
        return maxOutputChannels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxOutputChannels
     * }
     */
    public static int maxOutputChannels(MemorySegment struct) {
        return struct.get(maxOutputChannels$LAYOUT, maxOutputChannels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxOutputChannels
     * }
     */
    public static void maxOutputChannels(MemorySegment struct, int fieldValue) {
        struct.set(maxOutputChannels$LAYOUT, maxOutputChannels$OFFSET, fieldValue);
    }

    private static final OfDouble defaultLowInputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("defaultLowInputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime defaultLowInputLatency
     * }
     */
    public static final OfDouble defaultLowInputLatency$layout() {
        return defaultLowInputLatency$LAYOUT;
    }

    private static final long defaultLowInputLatency$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime defaultLowInputLatency
     * }
     */
    public static final long defaultLowInputLatency$offset() {
        return defaultLowInputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime defaultLowInputLatency
     * }
     */
    public static double defaultLowInputLatency(MemorySegment struct) {
        return struct.get(defaultLowInputLatency$LAYOUT, defaultLowInputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime defaultLowInputLatency
     * }
     */
    public static void defaultLowInputLatency(MemorySegment struct, double fieldValue) {
        struct.set(defaultLowInputLatency$LAYOUT, defaultLowInputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble defaultLowOutputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("defaultLowOutputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime defaultLowOutputLatency
     * }
     */
    public static final OfDouble defaultLowOutputLatency$layout() {
        return defaultLowOutputLatency$LAYOUT;
    }

    private static final long defaultLowOutputLatency$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime defaultLowOutputLatency
     * }
     */
    public static final long defaultLowOutputLatency$offset() {
        return defaultLowOutputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime defaultLowOutputLatency
     * }
     */
    public static double defaultLowOutputLatency(MemorySegment struct) {
        return struct.get(defaultLowOutputLatency$LAYOUT, defaultLowOutputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime defaultLowOutputLatency
     * }
     */
    public static void defaultLowOutputLatency(MemorySegment struct, double fieldValue) {
        struct.set(defaultLowOutputLatency$LAYOUT, defaultLowOutputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble defaultHighInputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("defaultHighInputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime defaultHighInputLatency
     * }
     */
    public static final OfDouble defaultHighInputLatency$layout() {
        return defaultHighInputLatency$LAYOUT;
    }

    private static final long defaultHighInputLatency$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime defaultHighInputLatency
     * }
     */
    public static final long defaultHighInputLatency$offset() {
        return defaultHighInputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime defaultHighInputLatency
     * }
     */
    public static double defaultHighInputLatency(MemorySegment struct) {
        return struct.get(defaultHighInputLatency$LAYOUT, defaultHighInputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime defaultHighInputLatency
     * }
     */
    public static void defaultHighInputLatency(MemorySegment struct, double fieldValue) {
        struct.set(defaultHighInputLatency$LAYOUT, defaultHighInputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble defaultHighOutputLatency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("defaultHighOutputLatency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaTime defaultHighOutputLatency
     * }
     */
    public static final OfDouble defaultHighOutputLatency$layout() {
        return defaultHighOutputLatency$LAYOUT;
    }

    private static final long defaultHighOutputLatency$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaTime defaultHighOutputLatency
     * }
     */
    public static final long defaultHighOutputLatency$offset() {
        return defaultHighOutputLatency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaTime defaultHighOutputLatency
     * }
     */
    public static double defaultHighOutputLatency(MemorySegment struct) {
        return struct.get(defaultHighOutputLatency$LAYOUT, defaultHighOutputLatency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaTime defaultHighOutputLatency
     * }
     */
    public static void defaultHighOutputLatency(MemorySegment struct, double fieldValue) {
        struct.set(defaultHighOutputLatency$LAYOUT, defaultHighOutputLatency$OFFSET, fieldValue);
    }

    private static final OfDouble defaultSampleRate$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("defaultSampleRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double defaultSampleRate
     * }
     */
    public static final OfDouble defaultSampleRate$layout() {
        return defaultSampleRate$LAYOUT;
    }

    private static final long defaultSampleRate$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double defaultSampleRate
     * }
     */
    public static final long defaultSampleRate$offset() {
        return defaultSampleRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double defaultSampleRate
     * }
     */
    public static double defaultSampleRate(MemorySegment struct) {
        return struct.get(defaultSampleRate$LAYOUT, defaultSampleRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double defaultSampleRate
     * }
     */
    public static void defaultSampleRate(MemorySegment struct, double fieldValue) {
        struct.set(defaultSampleRate$LAYOUT, defaultSampleRate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


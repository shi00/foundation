<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>foundation</artifactId>
        <groupId>com.silong</groupId>
        <version>1.0.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <version>1.0.0</version>
    <artifactId>whispercpp-ffm</artifactId>
    <description>whispercpp support by FFM API</description>

    <properties>
        <main.basedir>${project.parent.basedir}</main.basedir>
        <native.libsdir.name>native-libs</native.libsdir.name>
        <nativelibs.dir>${project.basedir}/src/main/resources/${native.libsdir.name}/${os.detected.classifier}
        </nativelibs.dir>
        <java.version>22</java.version>
        <output.src.dir>whispercpp-java-src</output.src.dir>
        <output.shared-lib.dir>classes</output.shared-lib.dir>
        <header.class.name>WhisperCpp</header.class.name>
        <lib.name>libwhisper</lib.name>
        <sourcecode.package>com.silong.foundation.utilities.whispercpp.generated</sourcecode.package>
        <image.name>builder-whispercpp-${os.detected.classifier}:${project.version}</image.name>
        <windows.compiler.target.arch>x64</windows.compiler.target.arch>
    </properties>

    <profiles>
        <profile>
            <id>linux</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <os>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <docker.buildx.platforms>
                    linux/amd64
                    <!--            ,-->
                    <!--            linux/arm64-->
                </docker.buildx.platforms>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-image</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${image.name}</name>
                                            <build>
                                                <contextDir>${project.basedir}/builder/linux</contextDir>
                                                <dockerFile>Dockerfile</dockerFile>
                                                <optimise>true</optimise>
                                                <buildx>
                                                    <configFile>builder/buildkitd.toml</configFile>
                                                    <platforms>
                                                        ${docker.buildx.platforms}
                                                    </platforms>
                                                </buildx>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>start-build</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${image.name}</name>
                                            <run>
                                                <network>
                                                    <mode>host</mode>
                                                </network>
                                                <user>root</user>
                                                <log>
                                                    <prefix>%C</prefix>
                                                    <date>ISO8601</date>
                                                    <color>BLUE</color>
                                                </log>
                                                <volumes>
                                                    <bind>
                                                        <volume>
                                                            ${project.build.directory}/generated-sources:/opt/${output.src.dir}
                                                        </volume>
                                                        <volume>
                                                            ${nativelibs.dir}:/opt/${output.shared-lib.dir}
                                                        </volume>
                                                    </bind>
                                                </volumes>
                                                <autoRemove>true</autoRemove>
                                                <stopMode>graceful</stopMode>
                                                <containerNamePattern>%e</containerNamePattern>
                                                <entrypoint>
                                                    <shell>
                                                        ./build.sh ${output.src.dir} ${output.shared-lib.dir}
                                                        ${lib.name} ${header.class.name} ${sourcecode.package}
                                                    </shell>
                                                </entrypoint>
                                                <wait>
                                                    <time>7200000</time>
                                                    <log>================== Build completed ==================</log>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <verbose>true</verbose>
                            <useColor>true</useColor>
                            <imagePullPolicy>IfNotPresent</imagePullPolicy>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>windows</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <os>
                    <name>windows</name>
                </os>
            </activation>
            <build>
                <!-- windows容器启动需要挂载classes和generated-sources目录，此处与Linux平台不同(linux docker会自己创建不存在的挂载目录)，需要提前创建好提供给windows容器 -->
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-image</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${image.name}</name>
                                            <build>
                                                <dockerFile>Dockerfile</dockerFile>
                                                <contextDir>${project.basedir}\builder\windows</contextDir>
                                                <optimise>true</optimise>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>start-build</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${image.name}</name>
                                            <run>
                                                <network>
                                                    <name>nat</name>
                                                </network>
                                                <dns>223.5.5.5,8.8.8.8</dns>
                                                <user>ContainerAdministrator</user>
                                                <log>
                                                    <prefix>%C</prefix>
                                                    <date>ISO8601</date>
                                                    <color>BLUE</color>
                                                </log>
                                                <volumes>
                                                    <bind>
                                                        <volume>
                                                            ${project.build.directory}\generated-sources:c:\${output.src.dir}
                                                        </volume>
                                                        <volume>
                                                            ${nativelibs.dir}:c:\${output.shared-lib.dir}
                                                        </volume>
                                                    </bind>
                                                </volumes>
                                                <autoRemove>true</autoRemove>
                                                <stopMode>graceful</stopMode>
                                                <containerNamePattern>%e</containerNamePattern>
                                                <entrypoint>
                                                    <shell>
                                                        powershell .\build.ps1 ${output.src.dir}
                                                        ${output.shared-lib.dir}
                                                        ${lib.name} ${header.class.name} ${sourcecode.package}
                                                        ${windows.compiler.target.arch}
                                                    </shell>
                                                </entrypoint>
                                                <wait>
                                                    <time>7200000</time>
                                                    <log>================== Build completed ==================</log>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <verbose>true</verbose>
                            <useColor>true</useColor>
                            <imagePullPolicy>IfNotPresent</imagePullPolicy>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.silong</groupId>
            <artifactId>nativelib-loader</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>javacv</artifactId>
            <exclusions>
                <!-- 排除视频/图像相关依赖 -->
                <exclusion>
                    <groupId>org.bytedeco</groupId>
                    <artifactId>opencv</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.bytedeco</groupId>
                    <artifactId>javafx</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>artoolkitplus</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>flycapture</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>leptonica</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>libdc1394</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>libfreenect</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>librealsense</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>libfreenect2</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>librealsense2</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>openblas</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>tesseract</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>videoinput</artifactId>
                    <groupId>org.bytedeco</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 2. FFmpeg 核心库（音频解码核心，无平台依赖） -->
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>ffmpeg</artifactId>
            <version>7.1.1-${javacv.version}</version>
            <classifier>${os.detected.classifier}</classifier>
            <exclusions>
                <!-- 排除FFmpeg的视频相关原生绑定（若有） -->
                <exclusion>
                    <groupId>org.bytedeco</groupId>
                    <artifactId>ffmpeg-platform</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <!-- 配置资源目录及排除规则 -->
                    <resources>
                        <resource>
                            <!-- 源资源目录（默认就是 src/main/resources，可省略，但显式配置更清晰） -->
                            <directory>src/main/resources</directory>
                            <!-- 排除规则：排除 hack 目录及其下所有内容 -->
                            <excludes>
                                <!-- 规则1：排除 hack 目录本身（单层目录匹配） -->
                                <exclude>hack/</exclude>
                                <!-- 规则2：排除 hack 目录下所有文件和子目录（** 匹配多层） -->
                                <exclude>hack/**</exclude>
                            </excludes>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>create-dirs</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${nativelibs.dir}"/>
                                <mkdir dir="${project.build.directory}/generated-sources"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-files</id>
                        <phase>process-resources</phase> <!-- 绑定到打包阶段 -->
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- 另一个拷贝任务：拷贝单个文件并改名 -->
                                <copy file="src/main/resources/hack/${os.detected.classifier}/WhisperCpp_1.java.bak"
                                      tofile="${project.build.directory}/generated-sources/com/silong/foundation/utilities/whispercpp/generated/WhisperCpp_1.java"
                                      overwrite="true"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${nativelibs.dir}</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>**/models/*</exclude>
                        <exclude>*.json</exclude>
                        <exclude>**/${native.libsdir.name}/*</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>os-classifier</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>${os.detected.classifier}</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <release>${java.version}</release>
                    <annotationProcessorPaths>
                        <annotationProcessorPath>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </annotationProcessorPath>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>foundation</artifactId>
        <groupId>com.silong</groupId>
        <version>1.0.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <version>1.0.0</version>
    <artifactId>xxhashffm</artifactId>
    <description>xxhash support by FFM API</description>

    <properties>
        <main.basedir>${project.parent.basedir}</main.basedir>
        <xxhash.version>0.8.2</xxhash.version>
        <output.src.dir>xxhash-java-src</output.src.dir>
        <output.shared-lib.dir>classes</output.shared-lib.dir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArgs>--enable-preview</compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <images>
                                <image>
                                    <name>builder-base:${project.version}</name>
                                    <build>
                                        <dockerFileDir>${project.basedir}</dockerFileDir>
                                        <optimise>true</optimise>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>start-build</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <images>
                                <image>
                                    <name>builder-base:${project.version}</name>
                                    <run>
                                        <network>
                                            <mode>host</mode>
                                        </network>
                                        <user>root</user>
                                        <log>
                                            <prefix>%C</prefix>
                                            <date>ISO8601</date>
                                            <color>BLUE</color>
                                        </log>
                                        <volumes>
                                            <bind>
                                                <volume>
                                                    ${project.basedir}/target/generated-sources:/opt/${output.src.dir}
                                                </volume>
                                                <volume>
                                                    ${project.build.outputDirectory}:/opt/${output.shared-lib.dir}
                                                </volume>
                                            </bind>
                                        </volumes>
                                        <autoRemove>true</autoRemove>
                                        <stopMode>graceful</stopMode>
                                        <containerNamePattern>%e</containerNamePattern>
                                        <entrypoint>
                                            <shell>
                                                ./build.sh ${xxhash.version} ${output.src.dir} ${output.shared-lib.dir}
                                            </shell>
                                        </entrypoint>
                                        <wait>
                                            <time>3600000</time>
                                            <log>================== Build completed ==================</log>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <useColor>true</useColor>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>